#+TITLE: ChikoNiko

* Chiko Niko System
琪可的笔记本配置。
#+begin_src scheme :tangle ../reconfigure/chikoniko-system.scm :noweb yes :noweb-prefix no
  (load "../common.scm")
  (use-modules <<module>>)

  <<define>>
  (define %os
    (operating-system
      <<env>>
      (bootloader <<bootloader>>)
      (initrd-modules (cons* <<initrd-module>> %base-initrd-modules))
      (privileged-programs (cons* <<privileged-program>> %default-privileged-programs))
      (users (cons* <<user>> %base-user-accounts))
      (groups (cons* <<group>> %base-groups))
      (services (cons* <<service>> %rosenthal-desktop-services))
      (mapped-devices (list <<mapped-device>>))
      (file-systems (append <<filesystems>> %base-file-systems))
      (packages (append (map spec->pkg '(<<package>>)) %base-packages))))

  ((compose <<transformation>>)
    %os)
#+end_src

** 基础信息
本地化、时区、键盘布局、主机名
#+begin_src scheme :noweb-ref env
  (locale "zh_CN.utf8")
  (timezone "Asia/Singapore")
  (keyboard-layout (keyboard-layout "us"))
  (host-name "chikoniko")
#+end_src

** 系统模块
#+begin_src scheme :noweb-ref initrd-module
  "dummy"
#+end_src

** 用户配置
*** Root
#+begin_src scheme :noweb-ref user
  (user-account
    (inherit %root-account)
    (password #f))
#+end_src

*** MinkieYume
#+begin_src scheme :noweb-ref user
  (user-account
    (name "minkieyume")
    (comment "Minkieyume")
    (group "users")
    (home-directory "/home/minkieyume")
    (supplementary-groups '("wheel" "netdev" "audio" "video" "niko")))
#+end_src

#+begin_src scheme :noweb-ref group
  (user-group
   (name "niko"))
#+end_src

** 基础模块
#+begin_src scheme :noweb-ref module
  (gnu)
  (gnu system)
  (gnu system privilege)
  (srfi srfi-26)
  (ice-9 match)
  (gnu services sysctl)
#+end_src

#+begin_src scheme :noweb-ref module
  (rosenthal)
  (nonguix transformations)
#+end_src

** 基础包
一些基础包
#+begin_src scheme :noweb-ref package
  "htop" "curl"
#+end_src

** 密码导入
#+begin_src scheme :noweb-ref define
  (define %nyapasu-script
    (local-file "../secret/nyapasu.scm"))
  (load "../secret/nyapasu.scm")
#+end_src

** 性能监视
#+begin_src scheme :noweb-ref package
  "glances"
#+end_src

** Bootloader配置
#+begin_src scheme :noweb-ref bootloader
  (bootloader-configuration
    (bootloader grub-efi-bootloader)
    (targets (list "/boot/efi"))
    (keyboard-layout keyboard-layout))
#+end_src

** 内核配置
#+begin_src scheme :noweb-ref transformation
  (nonguix-transformation-linux)

  (lambda (os)
    (operating-system
      (inherit os)      
      (kernel-arguments
        (cons* "kernel.sysrq=1"
          "zswap.enabled=1"
          "zswap.max_pool_percent=90"
          "modprobe.blacklist=pcspkr"
          (operating-system-user-kernel-arguments os)))))

#+end_src

** 驱动映射
#+begin_src scheme :noweb-ref mapped-device
#+end_src

** 文件系统
这是被“挂载”的文件系统列表。
*** 系统盘
#+begin_src scheme :noweb-ref filesystems
  (let ((options-for-subvolume
          (lambda (subvolume)
            (string-join
              (list "compress=zstd"
                (or (and=> subvolume (cut string-append "subvol=" <>))
                  "subvolid=5"))
              ","))))
    (map (match-lambda
           ((subvolume . mount-point)
             (file-system
               (device (file-system-label "niko"))
               (mount-point mount-point)
               (type "btrfs")
               (options (options-for-subvolume subvolume))
               (create-mount-point? #t)
               (check? (string=? mount-point "/")))))
      '(("@System" . "/")
        ("@Data"      .      "/var/lib")
        ("@Log"      .       "/var/log")
        ("@GNU"       .          "/gnu")
        ("@Home"      .         "/home")
        ("@Tmp"       .         "/tmp")
        ("@Creator"   . "/niko/creator")
        ("@Develop"   . "/niko/develop")
        ("@Picture"   . "/niko/picture")
        ("@Video"     . "/niko/video")
        ("@Audio"     .   "/niko/audio")
        ("@Program"   . "/niko/program")
        ("@Games"     .   "/niko/games")
        ("@Download"  ."/niko/download")
        (#f           .     "/mnt/niko"))))
#+end_src

#+begin_src scheme :noweb-ref filesystems
  (list
    (file-system
      (mount-point "/boot/efi")
      (device (uuid "639A-B4E6"
                'fat32))
      (type "vfat")))
#+end_src

#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
     (inherit os)
     (swap-devices
      (list (swap-space
             (target (uuid "204fc3c3-89b6-449b-9b32-9df5ed18d024"))
             (discard? #t))))))
#+end_src

** Guix配置
#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
     (inherit os)
     (services
      (modify-services (operating-system-user-services os)
  		     (guix-service-type
  		      config => (guix-configuration
  				 (inherit config)
  				 (substitute-urls %chiko-substitute-urls)
  				 (channels %chiko-channels)  				 
  				 (discover? #t)
  				 (extra-options '("--cores=0"))
  				 (tmpdir "/mnt/niko/@Build")))))))
#+end_src

* Chiko Niko Home
#+begin_src scheme :noweb yes :noweb-ref module
  (gnu home services)
  (gnu home services dotfiles)
  (gnu home services shells)
#+end_src

** Home服务
#+begin_src scheme :noweb yes :noweb-prefix no :noweb-ref service
  (service guix-home-service-type
  	 `(("minkieyume" ,(home-environment
  			   (services (cons* <<home-service>> %rosenthal-desktop-home-services))))))
#+end_src

#+begin_src scheme :noweb yes :noweb-ref home-service
  (service home-dotfiles-service-type
    (home-dotfiles-configuration
      (directories '("../files/config/dotfiles"))))
#+end_src

** 环境变量
#+begin_src scheme :noweb yes :noweb-ref home-service :noweb-prefix no
  (simple-service 'extra-environment-variables
      home-environment-variables-service-type
    `(<<home-environment-variable>>))
#+end_src


* 基础服务
** 登陆管理
#+begin_src scheme :noweb-ref service
  (service pam-limits-service-type
  	 (list
            (pam-limits-entry "*" 'both 'nofile 100000)))
#+end_src

** 网络模块
#+begin_src scheme :noweb-ref module
  (gnu services networking)
#+end_src

*** 系统网络
#+begin_src scheme :noweb-ref service
  ;; https://github.com/quic-go/quic-go/wiki/UDP-Buffer-Sizes
  (simple-service 'udp-buffer-size
    sysctl-service-type
    '(("net.core.rmem_max" . "7500000")
       ("net.core.wmem_max" . "7500000")))
  (simple-service 'ip-forward
    sysctl-service-type
    '(("net.ipv4.ip_forward" . "1")
       ("net.ipv6.conf.all.forwarding" . "1")))
#+end_src

*** NetworkManager
#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
     (inherit os)
     (services
      (modify-services (operating-system-user-services os)
  		     (network-manager-service-type
  		      config => (network-manager-configuration
  				 (inherit config)
  				 (extra-configuration-files
  				  `(("wifi_rand_mac.conf"
  				     ,(plain-file "wifi_rand_mac.conf" "\
  # Generate a random MAC for each network connection and associate the two
  # permanently.
  [connection-mac-randomization]
  ethernet.cloned-mac-address=stable
  wifi.cloned-mac-address=stable\n"))
  				    ("ip6-privacy.conf"
  				     ,(plain-file "ip6-privacy.conf" "\
  # Use IPv6 Privacy Extensions.
  [connection]
  ipv6.ip6-privacy=2\n"))))))))))
#+end_src

*** Nftables
#+begin_src scheme :noweb-ref service
  (service nftables-service-type
    (nftables-configuration
      (ruleset (local-file "../files/config/chikoniko/nftables.conf"))))
#+end_src

** OpenSSH
#+begin_src scheme :noweb-ref module
  (gnu services ssh)
#+end_src

配置SSH配置的服务：
#+begin_src scheme :noweb-ref service
  (service openssh-service-type
    (openssh-configuration
      (password-authentication? #f)
      (permit-root-login #f)
      (authorized-keys
        `(("minkieyume"
            ,(local-file "../files/keys/yumemi_rsa.pub"))))))
#+end_src

** Mcron
Mcron是guix用于管理计划任务的服务，类似crontab。
#+begin_src scheme :noweb-ref module
  (gnu services mcron)
#+end_src

mcron的服务，值得注意的是，jobs的参数必须要用quote括起来，因为里面是一个传递给mcron的(job xxxx)的表达式，这个表达式不能在guix编译时运行。
#+begin_src scheme :noweb-ref service :noweb yes :noweb-prefix no
  (service mcron-service-type
    (mcron-configuration
      (jobs '(<<mcron-job>>))))
#+end_src

* 工具
** Git
#+begin_src scheme :noweb-ref module
  (gnu packages version-control)
#+end_src

#+begin_src scheme :noweb-ref package
  "git"
#+end_src

** Emacs
基础的包配置
#+begin_src scheme :noweb-ref package
  "emacs-pgtk"
#+end_src

模块配置
#+begin_src scheme :noweb-ref module
  (gnu packages emacs)
#+end_src

** Doas
Doas是比Sudo更简洁，也更为安全的提权工具。
之所以用Doas而不用Sudo，是因为Sudo通常会有一定的安全漏洞，结构也比较复杂，而Doas结构相对简单，攻击面也更少，适合不需要复杂提权配置的服务器或个人。
#+begin_src scheme :noweb-ref package
  "opendoas"
#+end_src

引入自定义的包定义的doas服务。
#+begin_src scheme :noweb-ref module
  (chiko services doas)
#+end_src

自定义doas规则：
#+begin_src scheme :noweb-ref service :noweb yes :noweb-prefix no
  (service doas-service-type
    (doas-configuration
      (rules
        (list <<doas-ruleset>>))))
#+end_src

*** Doas规则
doas规则的匹配顺序是下面的规则覆盖上面的规则，因此最上面的规则最好作为默认和根规则，而下面的规则则作为覆盖上面规则的其它额外规则。

这是最基础的规则，应用于组的规则
#+begin_src scheme :noweb-ref doas-ruleset
  (doas-rule
    (permit #t)
    (user ":wheel")
    (options '("persist" "keepenv")))
#+end_src

为root用户提供修复的环境变量补全
#+begin_src scheme :noweb-ref doas-ruleset
  (doas-rule
    (permit #t)
    (user ":wheel")
    (options '("persist"
               "setenv { http_proxy https_proxy HOME=/root XDG_CACHE_HOME=/root/.cache PATH=/run/setuid-programs:/root/.config/guix/current/bin:/run/current-system/profile/bin:/run/current-system/profile/sbin INFOPATH=/root/.config/guix/current/share/info:/run/current-system/profile/share/info GIT_EXEC_PATH=/root/.guix-profile/libexec/git-core}"))
    (as-target "root"))
#+end_src

*** 禁用sudo
为了安全，最好禁用sudo，避免sudo的漏洞影响安全性。
#+begin_src scheme :noweb-ref env
  (sudoers-file
    (plain-file "sudoers" "# empty sudoers file\n"))
#+end_src

** GPG
#+begin_src scheme :noweb-ref package
  "gnupg"
#+end_src

#+begin_src scheme :noweb-ref module
  (gnu packages gnupg)
  (gnu home services gnupg)
#+end_src

#+begin_src scheme :noweb-ref home-service
  (service home-gpg-agent-service-type
    (home-gpg-agent-configuration
      (pinentry-program
        (file-append (spec->pkg "pinentry-emacs") "/bin/pinentry-emacs"))
      (ssh-support? #t)
      (extra-content "allow-loopback-pinentry")))
#+end_src

** 解压
模块配置
#+begin_src scheme :noweb-ref module
  (gnu packages compression)
#+end_src

#+begin_src scheme :noweb-ref package
  "unzip"
#+end_src

* 代理
** Yggdrasil
#+begin_src scheme :noweb-ref service
  (service yggdrasil-service-type
    (yggdrasil-configuration
      (autoconf? #f) ;; use only the public peers
      (json-config
        '((peers . #("tls://yg-hkg.magicum.net:32333"
                     "quic://yg-hkg.magicum.net:32334"))
           (listen . #("tls://0.0.0.0:1234"
                       "quic://0.0.0.0:1234"
                       "tls://[::]:1234"
                       "quic://[::]:1234"))))))
#+end_src

* 容器
#+begin_src scheme :noweb-ref module
  (gnu services docker)
#+end_src

#+begin_src scheme :noweb-ref service
  (service containerd-service-type)
#+end_src

#+begin_src scheme :noweb-ref service
  (service docker-service-type
    (docker-configuration
      (enable-iptables? #f)))
#+end_src

* 桌面环境
#+begin_src scheme :noweb-ref module
  (gnu home services fontutils)
#+end_src

** Wayland
*** niri
#+begin_src scheme :noweb-ref package
  "niri"
  "wl-clipboard"
  "imv"
  "foot"
  "light"
  "swaylock-effects"
  "wireplumber"
  "xwayland-satellite"
#+end_src

#+begin_src scheme :noweb-ref home-service
  (service home-niri-service-type
    (home-niri-configuration
      (config
        (computed-substitution-with-inputs "niri.kdl"
          (local-file "../files/config/chikoniko/niri.kdl")
          (specs->pkgs "foot"
            "light"
            "swaylock-effects"
            "wireplumber"
            "xwayland-satellite")))))
#+end_src

*** xdg-desktop-portal
#+begin_src scheme :noweb-ref package
  "xdg-desktop-portal"
  "xdg-desktop-portal-gnome"
  "xdg-desktop-portal-gtk"
#+end_src

*** waybar
#+begin_src scheme :noweb-ref home-service
  (service home-waybar-service-type
    (home-waybar-configuration
      (config
        (computed-substitution-with-inputs "config.jsonc"
          (local-file "../files/config/chikoniko/waybar.jsonc")
          (specs->pkgs "light" "wireplumber")))
      (style
        (local-file "../files/config/chikoniko/waybar.css"))))
#+end_src

*** swaybg
#+begin_src scheme :noweb-ref home-service
  (service home-swaybg-service-type
    (home-swaybg-configuration
      (background (local-file "../secret/wallpapers/wp3283230-oneshot-wallpapers.jpg"))))
#+end_src

*** mako
#+begin_src scheme :noweb-ref home-service
  (service home-mako-service-type
    (home-mako-configuration
      (config (local-file "../files/config/chikoniko/mako.conf"))))
#+end_src

*** fontconfig
#+begin_src scheme :noweb-ref package
  "font-awesome"
  "font-adobe-source-serif"
  "font-google-noto"
  "font-google-noto-sans-cjk"
  "font-google-noto-serif-cjk"
  "font-google-noto-emoji"
  "font-victor-mono"
  "font-sarasa-gothic"
#+end_src

#+begin_src scheme :noweb-ref home-service
  (simple-service 'extra-fontconfig
      home-fontconfig-service-type
    (let ((sans  "SF Pro Text")
          (serif "New York Medium")
          (mono  "Victor Mono")
          (emoji "Noto Color Emoji"))
      `((alias
         (family "sans-serif")
         (prefer
          (family ,sans)
          (family "Noto Sans CJK SC")
          (family ,emoji)))
        (alias
         (family "serif")
         (prefer
          (family ,serif)
          (family "Noto Serif CJK SC")
          (family ,emoji)))
        (alias
         (family "monospace")
         (prefer
          (family ,mono)
          (family "Sarasa Mono SC")
          (family ,emoji)))

        ,@(map (lambda (name)
                 `(alias
                   (family ,name)
                   (prefer
                    (family ,sans)
                    (family "sans-serif"))))
               '("system-ui"
                 "ui-sans-serif"))
        (alias
         (family "ui-serif")
         (prefer
          (family ,serif)
          (family "serif")))
        (alias
         (family "ui-monospace")
         (prefer
          (family ,mono)
          (family "monospace"))))))
#+end_src

*** fcitx5
#+begin_src scheme :noweb-ref home-service
  (service home-fcitx5-service-type
    (home-fcitx5-configuration
      (themes (specs->pkgs "fcitx5-material-color-theme"))
      (input-method-editors (specs->pkgs "fcitx5-rime"))))
#+end_src

*** librewolf
#+begin_src scheme :noweb-ref package
  "librewolf"
  "adaptive-tab-bar-colour-icecat"
  "bitwarden-icecat"
  "livemarks-icecat"
  "miniflux-injector-icecat"
  "ohmyech-icecat"
  "privacy-redirect-icecat"
  "ublock-origin-icecat"
#+end_src


* 音乐创作
** SingBox
八音盒软件

#+begin_src scheme :noweb-ref package
"sing-box"
#+end_src

*** 配置导入
#+begin_src scheme :noweb-ref define
  (define %sing-box-listener
    (local-file "../files/config/singbox/listener.scm"))
  (define %sing-box-config-file
    (computed-file "sing-box.json"
      (with-extensions (map specification->package '("guile-json@4"))
        #~(begin
            (primitive-load #$%nyapasu-script)
            (primitive-load #$%sing-box-listener)
            (output-singbox-listener #$output)))))
#+end_src

*** 权限
#+begin_src scheme :noweb-ref privileged-program
  (privileged-program
    (program (file-append (spec->pkg "sing-box") "/bin/sing-box"))
    (capabilities "cap_net_admin,cap_net_bind_service,cap_net_raw+ep"))
#+end_src

*** 服务
#+begin_src scheme :noweb-ref service
  (simple-service 'sing-box-service
  		shepherd-root-service-type
  		(list
  		 (let ((config %sing-box-config-file))
  		   (shepherd-service
  		    (documentation "Run sing-box singing listener.")
  		    (provision '(sing-box))
  		    (requirement '(networking))
  		    (start #~(make-forkexec-constructor
  			      (list "/run/privileged/bin/sing-box" "run" "-c" #$config)
                                #:log-file "/var/log/sing-box.log"
                                #:supplementary-groups '("netdev")
    		                #:user "singbox"
  			      #:resource-limits '((nofile 100000 100000))))
  		    (stop #~(make-kill-destructor))))))
#+end_src

*** 透明唱片
#+begin_src scheme :noweb-ref service
    (simple-service 'tcd
      shepherd-root-service-type
      (list
        (shepherd-service
          (documentation "运行一个TCD，透明唱片播放程序")
          (provision '(tcd-init))
          (requirement '(networking))
          (one-shot? #t)
          (start #~(lambda _
                     (let* ((ip-route #$(file-append (spec->pkg "iproute2") "/sbin/ip"))
                            (cmd (string-append ip-route " route add local default dev lo table 100\n"
                                  ip-route " rule add fwmark 1 table 100"))
                            (status (system cmd)))
    		               (= 0 (status:exit-val status))))))))
#+end_src

*** 用户态
#+begin_src scheme :noweb-ref user
  (user-account
    (name "singbox")
    (group "nogroup")
    (system? #t)
    (home-directory "/var/empty/"))
#+end_src

