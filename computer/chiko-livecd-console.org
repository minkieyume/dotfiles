# SPDX-FileCopyrightText: 2025 Minkie Yume <sign@yumieko.com>
# SPDX-FileCopyrightText: 2025 Hilton Chain <hako@ultrarare.space>
# SPDX-License-Identifier: GPL-3.0-or-later
# SPDX-License-Identifier: CC-BY-SA-4.0
#+TITLE: Chiko-LiveCD-Console
#+PROPERTY: header-args :noweb-prefix no

* Guix System
#+name: guix-system
#+begin_src scheme :tangle ../reconfigure/chiko-livecd-console.scm :noweb yes
  (use-modules (nonguix transformations)
               (rosenthal)
  	     (chiko utils transformations)
               <<module>>)

  (define %os
    (operating-system
      (host-name "live-system")
      (bootloader <<bootloader>>)
      (file-systems %base-file-systems)
      (users (cons* <<user>> %base-user-accounts))
      (packages
       (append (list %rosenthal-set-keymap)
               (@@ (gnu system install) %installer-disk-utilities)
               %base-packages))
      (services
       (cons* <<service>>
              ((@@ (gnu system install) cow-store-service))
              %base-services))))

  ((compose <<transformation>>)
   %os)
#+end_src

* Bootloader & Kernel
#+name: bootloader
#+begin_src scheme :noweb yes
  (bootloader-configuration
    (bootloader grub-bootloader)
    (targets '("/dev/sda")))
#+end_src

FIXME: Using =microcode-initrd= will make the system image unbootable.
#+begin_src scheme :noweb-ref transformation
  (nonguix-transformation-linux
   #:initrd base-initrd)
#+end_src

* Console Font
#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
      (inherit os)
      (services
       (modify-services (operating-system-user-services os)
         (console-font-service-type
          _ => (map (lambda (num)
                      (let* ((path "/share/consolefonts/ter-132n")
                             (font (file-append (specification->package "font-terminus") path))
                             (tty (string-append "tty" (number->string num))))
                        (cons tty font)))
                    (iota 6 1)))))))
#+end_src

* Networking & SSH
#+begin_src scheme :noweb-ref module
  (gnu services networking)
  (gnu services ssh)
#+end_src

#+begin_src scheme :noweb-ref service
  (service wpa-supplicant-service-type)
  (service network-manager-service-type)
#+end_src

#+begin_src scheme :noweb-ref service
  (service openssh-service-type
    (openssh-configuration
      (openssh (specification->package "openssh-sans-x"))
      (password-authentication? #t)))
#+end_src

* Users
Password: =chikochiko=.
#+begin_src scheme :noweb-ref user
  (user-account
    (name "live")
    (password "$6$dZgD5vHb1JKmzn8W$4xAUTP8//E7WRAZaoxlbB0CQGqcI6W52x/5TKpvGG33gR86pJWXP0s/AqKp0FEREjHzKQO7eF8nYbwk/Azqwc0")
    (group "users")
    (supplementary-groups '("audio" "video" "wheel"))
    (shell (file-append (specification->package "fish") "/bin/fish")))
#+end_src

#+begin_src scheme :noweb-ref user
  (user-account
    (inherit %root-account)
    (password #f))
#+end_src

#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
      (inherit os)
      (sudoers-file
       (plain-file "sudoers"
         (string-append
          (plain-file-content (operating-system-sudoers-file os))
          "live ALL = NOPASSWD: ALL\n")))))
#+end_src

* Guix Daemon
#+begin_src scheme :noweb-ref module
  (guix scripts pull)
  (gnu packages package-management)
#+end_src

Lock channels to avoid building Guix when using the LiveCD.
#+begin_src scheme :noweb-ref transformation
  (nonguix-transformation-guix
   #:channel? #f)
  (rosenthal-transformation-guix
   #:channel? #f)
  (chiko-transformation-guix
   #:channel? #f)

  (lambda (os)
    (operating-system
     (inherit os)
     (services
      (modify-services (operating-system-user-services os)
  		     (guix-service-type
  		      config => (guix-configuration
  				 (inherit config)
  				 (channels (channel-list '((channel-file . "channels.lock"))))
  				 (guix (guix-for-channels channels))))))))
#+end_src

* LiveCD specific
#+begin_src scheme :noweb-ref transformation
  (lambda (os)
    (operating-system
      (inherit os)
      (services
       (modify-services (operating-system-user-services os)
         (login-service-type
          config => (login-configuration
                      (inherit config)
                      (motd (plain-file "motd" "
  Welcome to the LiveCD!  You can use `set-keymap' to set up keyboard
  layout and `sudo nmtui' to configure network.

  Configuration examples are under the `/etc/configuration' directory.

  "))))))))
#+end_src
