#+TITLE: ChikoCloud

* Chiko Cloud System
琪可云的系统配置，使用 `guix system reconfigure 文件名.scm` 即可应用更改
#+begin_src scheme :tangle ../reconfigure/chiko_cloud_system.scm :noweb yes :noweb-prefix no
  (use-modules <<module>>)

  <<define>>

  (operating-system
    <<env>>
    (bootloader <<bootloader>>)
    (initrd-modules (cons* <<initrd-module>> %base-initrd-modules))
    (privileged-programs (cons* <<privileged-program>> %default-privileged-programs))
    (users (cons* <<user>> %base-user-accounts))
    (services (cons* <<service>> %base-services))
    (mapped-devices (list <<mapped-device>>))
    (file-systems (cons* <<filesystem>> %base-file-systems))
    (packages (cons* <<package>> %base-packages)))
#+end_src

** 基础信息
本地化、时区、键盘布局、主机名
#+begin_src scheme :noweb-ref env
  (locale "zh_CN.utf8")
  (timezone "Asia/Singapore")
  (keyboard-layout (keyboard-layout "us"))
  (host-name "chikocloud")
#+end_src

** VPS支持
#+begin_src scheme :noweb-ref initrd-module
  "virtio_scsi"
#+end_src

** 用户配置
*** MinkieYume
#+begin_src scheme :noweb-ref user
  (user-account
    (name "minkieyume")
    (comment "Minkieyume")
    (group "users")
    (home-directory "/home/minkieyume")
    (supplementary-groups '("wheel" "netdev" "audio" "video")))
#+end_src

** 基础模块
#+begin_src scheme :noweb-ref module
  (gnu)
  (gnu system)
  (gnu packages admin)  
  (gnu system privilege)
#+end_src

** 频道模块
#+begin_src scheme :noweb-ref module
  (rosenthal)
  (nonguix transformations)
#+end_src

** 密码导入
#+begin_src scheme :noweb-ref define
  (load "nyapasu.scm")
#+end_src

** 基础包
一些基础包
#+begin_src scheme :noweb-ref package
  htop curl
#+end_src

** 性能监视
#+begin_src scheme :noweb-ref module
  (gnu packages python-xyz)
#+end_src

#+begin_src scheme :noweb-ref package
  glances
#+end_src

** Bootloader配置
#+begin_src scheme :noweb-ref bootloader
  (bootloader-configuration
    (bootloader grub-efi-bootloader)
    (targets (list "/boot/efi"))
    (keyboard-layout keyboard-layout))
#+end_src

** 驱动映射
#+begin_src scheme :noweb-ref mapped-device
  (mapped-device
    (source (uuid
              "31481dcb-adb6-4939-9e3e-00816e884e0c"))
    (target "cryptroot")
    (type luks-device-mapping))
#+end_src

** 文件系统
这是被“挂载”的文件系统列表。唯一的文件系统标识符（“UUID”）可以通过在终端运行 'blkid' 获得。
#+begin_src scheme :noweb-ref filesystem
  (file-system
    (mount-point "/boot/efi")
    (device (uuid "DD36-2C2F"
              'fat32))
    (type "vfat"))
  (file-system
    (mount-point "/")
    (device "/dev/mapper/cryptroot")
    (type "ext4")
    (dependencies mapped-devices))
#+end_src

* 基础服务
** 网络模块
#+begin_src scheme :noweb-ref module
  (gnu services networking)
#+end_src

*** dhcpd和ntp
#+begin_src scheme :noweb-ref service
  (service dhcpcd-service-type)
  (service ntp-service-type)
#+end_src

*** Nftables
#+begin_src scheme :noweb-ref service
  (service nftables-service-type
    (nftables-configuration
      (ruleset (local-file "../files/config/chiko_cloud/nftables.conf"))))
#+end_src

** OpenSSH
#+begin_src scheme :noweb-ref module
  (gnu services ssh)
#+end_src

配置SSH配置的服务：
#+begin_src scheme :noweb-ref service
  (service openssh-service-type
    (openssh-configuration
      (password-authentication? #f)
      (permit-root-login #f)
      (authorized-keys
        `(("minkieyume"
            ,(local-file "../files/keys/yumemi_rsa.pub"))))))
#+end_src

** Doas
Doas是比Sudo更简洁，也更为安全的提权工具。
之所以用Doas而不用Sudo，是因为Sudo通常会有一定的安全漏洞，结构也比较复杂，而Doas结构相对简单，攻击面也更少，适合不需要复杂提权配置的服务器或个人。
#+begin_src scheme :noweb-ref package
  opendoas
#+end_src

由于自定义的doas服务默认不会更改程序掩码，Doas需要手动设置系统程序掩码。
#+begin_src scheme :noweb-ref privileged-program
  (privileged-program
    (program (file-append opendoas "/bin/doas"))
    (setuid? #t))
#+end_src

引入自定义的包定义的doas服务。
#+begin_src scheme :noweb-ref module
  (chiko services doas)
#+end_src

自定义doas规则：
#+begin_src scheme :noweb-ref service :noweb yes :noweb-prefix no
  (service doas-service-type
    (doas-configuration
      (rules
        (list <<doas-ruleset>>))))
#+end_src

*** Doas规则
doas规则的匹配顺序是下面的规则覆盖上面的规则，因此最上面的规则最好作为默认和根规则，而下面的规则则作为覆盖上面规则的其它额外规则。

这是最基础的规则，应用于组的规则
#+begin_src scheme :noweb-ref doas-ruleset
  (doas-rule
    (permit #t)
    (user ":wheel")
    (options '("persist" "keepenv")))
#+end_src

为root用户提供修复的环境变量补全
#+begin_src scheme :noweb-ref doas-ruleset
  (doas-rule
    (permit #t)
    (user ":wheel")
    (options '("persist"
                "setenv { HOME=/root XDG_CACHE_HOME=/root/.cache GUIX_PROFILE=/root/.config/guix/current PATH=/run/setuid-programs:/root/.config/guix/current/bin:/root/.guix-profile/bin:/run/current-system/profile/bin:/run/current-system/profile/sbin GIT_EXEC_PATH=/root/.guix-profile/libexec/git-core}"))
    (as-target "root"))
#+end_src

** GPG
#+begin_src scheme :noweb-ref package
  gnupg
#+end_src

#+begin_src scheme :noweb-ref module
  (gnu packages gnupg)
#+end_src

* 工具
** Emacs
基础的包配置
#+begin_src scheme :noweb-ref package
  emacs
#+end_src

模块配置
#+begin_src scheme :noweb-ref module
  (gnu packages emacs)
#+end_src

** 解压
模块配置
#+begin_src scheme :noweb-ref module
  (gnu packages compression)
#+end_src

#+begin_src scheme :noweb-ref package
  unzip
#+end_src

* 数据库
#+begin_src scheme :noweb-ref module
  (gnu services databases)
  (gnu packages databases)
#+end_src

** Postgresql
#+begin_src scheme :noweb-ref service
  (service postgresql-service-type
    (postgresql-configuration
      (postgresql (spec->pkg "postgresql@15"))))
#+end_src

** Redis
#+begin_src scheme :noweb-ref service
  (service redis-service-type)
#+end_src

* 网页
#+begin_src scheme :noweb-ref module
  (gnu services web)
  (gnu services certbot)
  (rosenthal services web)
#+end_src

** Certbot
用于自动签名域名
#+begin_src scheme :noweb-ref service
(service certbot-service-type
         (certbot-configuration
          (email "sign@yumieko.com")
          (certificates
           (list
            (certificate-configuration
             (domains '("littlewing.yumieko.com")))))))
#+end_src

** Nginx
用于转发网页代理
#+begin_src scheme :noweb-ref service
  (service nginx-service-type
    (nginx-configuration
      (extra-content "map $http_upgrade $connection_upgrade { default upgrade; '' close; }\nclient_max_body_size 50M;")
      (server-blocks
        (list
          (nginx-server-configuration
            (server-name '("littlewing.yumieko.com"))
            (listen '("443 ssl"))
            (ssl-certificate "/etc/certs/littlewing.yumieko.com/fullchain.pem")
            (ssl-certificate-key "/etc/certs/littlewing.yumieko.com/privkey.pem")
            (locations
              (list
                (nginx-location-configuration
                  (uri "/")
                  (body '("proxy_pass http://127.0.0.1:3000;"
                          "proxy_set_header Host $host;"
                          "proxy_http_version 1.1;"
                          "proxy_redirect off;"
                          "proxy_set_header Host $host;"
                          "proxy_set_header X-Real-IP $remote_addr;"
                          "proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;"
                          "proxy_set_header X-Forwarded-Proto $scheme;"
                          "proxy_set_header Upgrade $http_upgrade;"
                          "proxy_set_header Connection $connection_upgrade;"))))))))))
#+end_src

** Misskey
#+begin_src scheme :noweb-ref service
  (service misskey-service-type
    (misskey-configuration
      (image "misskey/misskey:latest")
      (config
        `((url . "https://littlewing.yumieko.com")
           (port . 3000)
           (db
             . ((host . localhost)
                 (port . 5432)
                 (db . misskey)
                 (user . misskey)
                 (pass . ,(nyapasu-ref 'misskeydb))))
           (dbReplications . #f)
           (redis
             . ((host . localhost)
                 (port . 6379)))
           (fulltextSearch
             . ((provider . sqlLike)))
           (id . "aidx")
           (clusterLimit . 4)
           (outgoingAddressFamily . dual)
           (proxyRemoteFiles . #t)
           (signToActivityPubGet . #t)))))
#+end_src

** NetBirdManagement


* 代理
** NetBird
#+begin_src scheme :noweb-ref module
  (glicid services vpn)
#+end_src

#+begin_src scheme :noweb-ref service
  (service netbird-service-type)
#+end_src

** Yggdrasil
#+begin_src scheme :noweb-ref service
      (service yggdrasil-service-type
        (yggdrasil-configuration
          (autoconf? #f) ;; use only the public peers
          (json-config
            '((peers . #("tls://ygg.jjolly.dev:3443"
                          "tls://yg-hkg.magicum.net:32333"))
               (listen . #("tls://0.0.0.0:1234"
                           "quic://0.0.0.0:1234"
                            "tls://[::]:1234"
                            "quic://[::]:1234"))))))
#+end_src

* 容器
#+begin_src scheme :noweb-ref module
  (gnu services docker)
#+end_src

#+begin_src scheme :noweb-ref service
  (service containerd-service-type)
#+end_src

#+begin_src scheme :noweb-ref service
  (service docker-service-type
    (docker-configuration
      (enable-iptables? #f)))
#+end_src

* 进程管理
#+begin_src scheme :noweb-ref module
  (gnu services dbus)
#+end_src

** dbus
#+begin_src scheme :noweb-ref service
  (service dbus-root-service-type)
#+end_src

** elogind
#+begin_src scheme :noweb-ref service
  (service elogind-service-type)
#+end_src
